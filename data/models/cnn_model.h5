import tensorflow as tf
from tensorflow.keras import layers, models
import numpy as np
import cv2

def build_cnn_model(input_shape):
    model = models.Sequential()
    model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=input_shape))
    model.add(layers.MaxPooling2D((2, 2)))
    model.add(layers.Conv2D(64, (3, 3), activation='relu'))
    model.add(layers.MaxPooling2D((2, 2)))
    model.add(layers.Conv2D(128, (3, 3), activation='relu'))
    model.add(layers.MaxPooling2D((2, 2)))
    model.add(layers.Flatten())
    model.add(layers.Dense(128, activation='relu'))
    model.add(layers.Dense(1, activation='sigmoid'))  # Adjust for multi-class if needed
    return model

def compile_model(model):
    model.compile(optimizer='adam',
                  loss='binary_crossentropy',  # Adjust for multi-class if needed
                  metrics=['accuracy'])

def predict_hygiene(model, frame):
    # Preprocess the frame
    img = cv2.resize(frame, (128, 128))  # Resize to match the input shape of the model
    img = img / 255.0  # Normalize the image
    img = np.expand_dims(img, axis=0)  # Add batch dimension

    # Make prediction
    prediction = model.predict(img)
    percentage = prediction[0][0] * 100  # Convert to percentage
    return percentage